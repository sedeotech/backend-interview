// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: cart/cart.proto

package cartpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	Get(ctx context.Context, in *CartGetMsg, opts ...grpc.CallOption) (*CartGetResultMsg, error)
	ConfigureAddress(ctx context.Context, in *CartConfigureAddressMsg, opts ...grpc.CallOption) (*CartConfigureResultMsg, error)
	AddItem(ctx context.Context, in *CartAddItemMsg, opts ...grpc.CallOption) (*CartAddItemResultMsg, error)
	UpdateQuantity(ctx context.Context, in *CartUpdateQuantityMsg, opts ...grpc.CallOption) (*CartUpdateQuantityResultMsg, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) Get(ctx context.Context, in *CartGetMsg, opts ...grpc.CallOption) (*CartGetResultMsg, error) {
	out := new(CartGetResultMsg)
	err := c.cc.Invoke(ctx, "/cart.Cart/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ConfigureAddress(ctx context.Context, in *CartConfigureAddressMsg, opts ...grpc.CallOption) (*CartConfigureResultMsg, error) {
	out := new(CartConfigureResultMsg)
	err := c.cc.Invoke(ctx, "/cart.Cart/ConfigureAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) AddItem(ctx context.Context, in *CartAddItemMsg, opts ...grpc.CallOption) (*CartAddItemResultMsg, error) {
	out := new(CartAddItemResultMsg)
	err := c.cc.Invoke(ctx, "/cart.Cart/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) UpdateQuantity(ctx context.Context, in *CartUpdateQuantityMsg, opts ...grpc.CallOption) (*CartUpdateQuantityResultMsg, error) {
	out := new(CartUpdateQuantityResultMsg)
	err := c.cc.Invoke(ctx, "/cart.Cart/UpdateQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	Get(context.Context, *CartGetMsg) (*CartGetResultMsg, error)
	ConfigureAddress(context.Context, *CartConfigureAddressMsg) (*CartConfigureResultMsg, error)
	AddItem(context.Context, *CartAddItemMsg) (*CartAddItemResultMsg, error)
	UpdateQuantity(context.Context, *CartUpdateQuantityMsg) (*CartUpdateQuantityResultMsg, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) Get(context.Context, *CartGetMsg) (*CartGetResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCartServer) ConfigureAddress(context.Context, *CartConfigureAddressMsg) (*CartConfigureResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAddress not implemented")
}
func (UnimplementedCartServer) AddItem(context.Context, *CartAddItemMsg) (*CartAddItemResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCartServer) UpdateQuantity(context.Context, *CartUpdateQuantityMsg) (*CartUpdateQuantityResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuantity not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.Cart/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).Get(ctx, req.(*CartGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ConfigureAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartConfigureAddressMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ConfigureAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.Cart/ConfigureAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ConfigureAddress(ctx, req.(*CartConfigureAddressMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartAddItemMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.Cart/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddItem(ctx, req.(*CartAddItemMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_UpdateQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartUpdateQuantityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).UpdateQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.Cart/UpdateQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).UpdateQuantity(ctx, req.(*CartUpdateQuantityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cart_Get_Handler,
		},
		{
			MethodName: "ConfigureAddress",
			Handler:    _Cart_ConfigureAddress_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _Cart_AddItem_Handler,
		},
		{
			MethodName: "UpdateQuantity",
			Handler:    _Cart_UpdateQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart/cart.proto",
}
